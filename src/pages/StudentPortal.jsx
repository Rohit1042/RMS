import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search, Download, Calendar, User, GraduationCap, Award, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useData } from '@/contexts/DataContext';
import { toast } from '@/components/ui/use-toast';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const StudentPortal = () => {
  const [rollNumber, setRollNumber] = useState('');
  const [dateOfBirth, setDateOfBirth] = useState('');
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const { getStudentResult, students } = useData();

  const handleSearch = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const studentResult = getStudentResult(rollNumber, dateOfBirth);
      if (studentResult) {
        setResult(studentResult);
        toast({
          title: "Result Found! ðŸŽ‰",
          description: "Your academic result has been retrieved successfully.",
        });
      } else {
        setResult(null);
        toast({
          title: "No Result Found",
          description: "Please check your roll number and date of birth.",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "An error occurred while searching for results.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const generatePDF = () => {
    if (!result) return;

    const student = students.find(s => s.rollNumber === result.rollNumber);
    
    const doc = new jsPDF();
    
    doc.setFontSize(22);
    doc.setTextColor(50, 50, 150);
    doc.text('Academic Grade Sheet', doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setTextColor(40, 40, 40);
    
    const studentInfo = [
      ["Student Name:", student?.name || 'N/A'],
      ["Roll Number:", result.rollNumber],
      ["Department:", student?.department || 'N/A'],
      ["Semester:", result.semester],
    ];

    doc.autoTable({
      startY: 30,
      head: [[{content: 'Student Information', colSpan: 2, styles: {fillColor: [70,70,170], textColor: 255, fontStyle: 'bold'}}]],
      body: studentInfo,
      theme: 'grid',
      styles: { fontSize: 10, cellPadding: 2 },
      headStyles: { fillColor: [70,70,170], textColor: 255, fontStyle: 'bold' },
      columnStyles: { 0: { fontStyle: 'bold' } }
    });

    const tableColumn = ["Subject Name", "Full Marks", "Marks Obtained", "Grade"];
    const tableRows = [];

    result.subjects.forEach(subject => {
      const subjectData = [
        subject.subjectName,
        subject.fullMarks || 100,
        subject.marks,
        subject.grade
      ];
      tableRows.push(subjectData);
    });

    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 10,
      head: [tableColumn],
      body: tableRows,
      theme: 'striped',
      headStyles: { fillColor: [70,70,170], textColor: 255, fontStyle: 'bold' },
      styles: { fontSize: 10, cellPadding: 2 },
    });
    
    const summaryInfo = [
      ["Total Marks Obtained:", result.totalMarks],
      ["Total Full Marks:", result.totalFullMarks || result.subjects.reduce((sum, s) => sum + (s.fullMarks || 100), 0)],
      ["Percentage:", `${result.percentage}%`],
      ["CGPA:", result.cgpa],
    ];

    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 10,
      head: [[{content: 'Result Summary', colSpan: 2, styles: {fillColor: [70,70,170], textColor: 255, fontStyle: 'bold'}}]],
      body: summaryInfo,
      theme: 'grid',
      styles: { fontSize: 10, cellPadding: 2 },
      headStyles: { fillColor: [70,70,170], textColor: 255, fontStyle: 'bold' },
      columnStyles: { 0: { fontStyle: 'bold' } }
    });

    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    const pageHeight = doc.internal.pageSize.height;
    doc.text(`Generated by Result Management System on ${new Date().toLocaleDateString()}`, 20, pageHeight - 10);
    
    doc.save(`${result.rollNumber}_gradesheet.pdf`);
    
    toast({
      title: "PDF Downloaded! ðŸ“„",
      description: "Your grade sheet has been downloaded as a PDF file.",
    });
  };

  const getGradeColor = (grade) => {
    switch (grade) {
      case 'A+': return 'text-green-400';
      case 'A': return 'text-green-300';
      case 'B+': return 'text-blue-400';
      case 'B': return 'text-blue-300';
      case 'C+': return 'text-yellow-400';
      case 'C': return 'text-yellow-300';
      default: return 'text-red-400';
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900"></div>
      <div className="absolute top-20 left-20 w-72 h-72 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-float"></div>
      <div className="absolute bottom-20 right-20 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-float" style={{ animationDelay: '2s' }}></div>

      <div className="relative z-10 container mx-auto px-4 py-16">
        <motion.div 
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h1 className="text-5xl font-bold text-white mb-6 gradient-text">Student Portal</h1>
          <p className="text-xl text-gray-200 max-w-2xl mx-auto">
            Search and download your academic results with ease
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="max-w-md mx-auto mb-12"
        >
          <Card className="glass-effect border-white/20 shadow-2xl">
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-white" />
              </div>
              <CardTitle className="text-2xl text-white">Search Your Result</CardTitle>
              <CardDescription className="text-gray-300">
                Enter your details to view your grade sheet
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSearch} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="rollNumber" className="text-white">Roll Number</Label>
                  <div className="relative">
                    <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="rollNumber"
                      type="text"
                      placeholder="Enter your roll number"
                      value={rollNumber}
                      onChange={(e) => setRollNumber(e.target.value)}
                      className="pl-10 bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                      required
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth" className="text-white">Date of Birth</Label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="dateOfBirth"
                      type="date"
                      value={dateOfBirth}
                      onChange={(e) => setDateOfBirth(e.target.value)}
                      className="pl-10 bg-white/10 border-white/20 text-white"
                      required
                    />
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white py-3 text-lg font-semibold rounded-xl shadow-lg transform transition-all duration-300 hover:scale-105"
                  disabled={loading}
                >
                  {loading ? "Searching..." : "View Grade Sheet"}
                </Button>
              </form>

              <div className="mt-6 p-4 bg-white/5 rounded-lg border border-white/10">
                <p className="text-sm text-gray-300 text-center">
                  <strong>Demo Credentials:</strong><br />
                  Roll Number: CS001 or CS002<br />
                  Date of Birth: 2000-01-15 or 2000-03-22
                </p>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {result && (
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="max-w-4xl mx-auto"
          >
            <Card className="result-card shadow-2xl">
              <CardHeader className="text-center border-b border-white/10 pb-6">
                <div className="w-20 h-20 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <FileText className="w-10 h-10 text-white" />
                </div>
                <CardTitle className="text-3xl text-white mb-2">Academic Grade Sheet</CardTitle>
                <CardDescription className="text-gray-300 text-lg">
                  {result.semester} - Roll Number: {result.rollNumber}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="p-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  <Card className="glass-effect border-white/20 p-4">
                    <h3 className="text-lg font-semibold text-white mb-2">Student Details</h3>
                    <p className="text-gray-300"><strong>Name:</strong> {students.find(s => s.rollNumber === result.rollNumber)?.name || 'N/A'}</p>
                    <p className="text-gray-300"><strong>Department:</strong> {students.find(s => s.rollNumber === result.rollNumber)?.department || 'N/A'}</p>
                  </Card>
                   <Card className="glass-effect border-white/20 p-4">
                    <h3 className="text-lg font-semibold text-white mb-2">Overall Performance</h3>
                    <p className="text-gray-300"><strong>Total Marks:</strong> {result.totalMarks} / {result.totalFullMarks || result.subjects.reduce((sum, s) => sum + (s.fullMarks || 100), 0)}</p>
                    <p className="text-gray-300"><strong>Percentage:</strong> {result.percentage}%</p>
                    <p className="text-gray-300"><strong>CGPA:</strong> {result.cgpa}</p>
                  </Card>
                </div>

                <div className="mb-8">
                  <h3 className="text-xl font-semibold text-white mb-6 text-center">Subject-wise Performance</h3>
                  <div className="overflow-x-auto">
                    <table className="w-full text-left">
                      <thead>
                        <tr className="border-b border-white/20">
                          <th className="p-3 text-white">Subject</th>
                          <th className="p-3 text-white text-center">Full Marks</th>
                          <th className="p-3 text-white text-center">Marks Obtained</th>
                          <th className="p-3 text-white text-center">Grade</th>
                        </tr>
                      </thead>
                      <tbody>
                        {result.subjects.map((subject, index) => (
                          <motion.tr
                            key={index}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                            className="border-b border-white/10 hover:bg-white/5"
                          >
                            <td className="p-3 text-white font-medium">{subject.subjectName}</td>
                            <td className="p-3 text-white text-center">{subject.fullMarks || 100}</td>
                            <td className="p-3 text-white text-center font-bold">{subject.marks}</td>
                            <td className={`p-3 text-center font-bold ${getGradeColor(subject.grade)}`}>
                              {subject.grade}
                            </td>
                          </motion.tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                <div className="text-center">
                  <Button
                    onClick={generatePDF}
                    className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-3 text-lg font-semibold rounded-xl shadow-lg transform transition-all duration-300 hover:scale-105"
                  >
                    <Download className="w-5 h-5 mr-2" />
                    Download Grade Sheet
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default StudentPortal;